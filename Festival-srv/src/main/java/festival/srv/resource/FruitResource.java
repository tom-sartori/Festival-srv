package festival.srv.resource;

import com.google.gson.Gson;
import festival.srv.constant.ApiPaths;
import festival.srv.entity.Fruit;
import festival.srv.service.FruitService;

import javax.inject.Inject;
import javax.ws.rs.*;
import javax.ws.rs.core.Response;

import static festival.srv.resource.Util.toJson;

@Path(ApiPaths.FRUIT)
@Produces("application/json")
@Consumes("application/json")
public class FruitResource {

	@Inject
	FruitService fruitService;


	/**
	 * Create a new fruit. The id is generated by the database.
	 * @param jsonBody the json body of the fruit. The id is ignored.
	 * @return 201 if the fruit is created.
	 */
	@POST
	public Response create(String jsonBody) {
		Fruit fruit = new Gson().fromJson(jsonBody, Fruit.class);
		fruitService.create(fruit);
		return Response.status(201).build();
	}

	/**
	 * Read all fruits. If there is no fruit, an empty list is returned.
	 * @return 200 with the list of fruits.
	 */
	@GET
	public Response read() {
		String json = toJson(fruitService.read());
		return Response.status(200).entity(json).build();
	}

	/**
	 * Read a fruit by its id. If the fruit does not exist, a 404 is returned.
	 * @param id the id of the fruit.
	 * @return 200 with the fruit.
	 */
	@GET
	@Path("/{id}")
	public Response read(@PathParam("id") String id) {
		String json = toJson(fruitService.read(id));
		return Response.status(200).entity(json).build();
	}

	/**
	 * Update a fruit. If the fruit does not exist, a 404 is returned.
	 *
	 * @param id the id of the fruit.
	 * @param jsonBody the json body of the fruit. The id is ignored.
	 * @return 204 if the fruit is updated.
	 */
	@PUT
	@Path("/{id}")
	public Response update(@PathParam("id") String id, String jsonBody) {
		Fruit fruit = new Gson().fromJson(jsonBody, Fruit.class);
		fruitService.update(id, fruit);
		return Response.status(204).build();
	}

	/**
	 * Delete a fruit.
	 *
	 * @param id the id of the fruit.
	 * @return 204 if the fruit is deleted.
	 */
	@DELETE
	@Path("/{id}")
	public Response delete(@PathParam("id") String id) {
		fruitService.delete(id);
		return Response.status(204).build();
	}
}
