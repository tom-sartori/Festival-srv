package festival.srv.service;

import com.mongodb.MongoWriteException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.result.UpdateResult;
import festival.srv.entity.Entity;
import org.bson.Document;
import org.bson.types.ObjectId;

import javax.inject.Inject;
import javax.transaction.Transactional;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.NotFoundException;
import java.util.ArrayList;
import java.util.List;

import static festival.srv.constant.DbCollections.DATABASE_NAME;
import static festival.srv.constant.DbKeys.ID;

public abstract class Service<T extends Entity> {

	@Inject
	protected MongoClient mongoClient;

	@Inject
	protected GameService gameService;

	@Inject
	protected VolunteerService volunteerService;


	protected abstract String getCollectionName();

	/**
	 * Get the collection from the database.
	 *
	 * @return The collection.
	 */
	protected MongoCollection<Document> getCollection(){
		return mongoClient.getDatabase(DATABASE_NAME).getCollection(getCollectionName());
	}

	/**
	 * Create a document in the collection. The id is automatically generated by the database.
	 *
	 * @param document The document to create.
	 */
	@Transactional
	protected void create(Document document){
		getCollection().insertOne(document);
	}

	/**
	 * Get all documents from the collection.
	 *
	 * @return The list of documents.
	 */
	protected List<Document> getDocumentList(){
		return getCollection().find().into(new ArrayList<>());
	}

	/**
	 * Get a document from the collection.
	 *
	 * @param id The id of the document.
	 * @return The document.
	 */
	protected Document getDocument(String id){
		Document document;
		try {
			document = getCollection().find(new Document(ID, new ObjectId(id))).first();
		}
		catch (IllegalArgumentException e) {
			throw new BadRequestException("The id is not valid. " + e.getMessage());
		}
		if (document == null) {
			throw new NotFoundException();
		}
		return document;
	}

	/**
	 * Update a document in the collection. The id is not updated.
	 *
	 * @param id The id of the document.
	 * @param t The document to update.
	 */
	@Transactional
	public void update(String id, T t){
		if (id.equals(":id")) {
			throw new BadRequestException("The id is null. ");
		}
		try {
			t.setId(null);
			UpdateResult updateResult = getCollection().updateOne(new Document(ID, new ObjectId(id)), new Document("$set", t));
			if (updateResult.getMatchedCount() == 0) {
				throw new NotFoundException();
			}
		}
		catch (MongoWriteException e) {
			if (e.getCode() == 6) {
				throw new BadRequestException("Modifiers operate on fields but we found type null instead. ");
			}
			throw e;
		}
	}

	/**
	 * Delete a document from the collection.
	 *
	 * @param id The id of the document.
	 */
	@Transactional
	public void delete(String id){
		getCollection().deleteOne(new Document("_id", new ObjectId(id)));
	}
}
