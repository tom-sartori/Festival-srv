package festival.srv.service;

import festival.srv.dto.SlotVolunteerDto;
import festival.srv.entity.Volunteer;
import festival.srv.entity.Zone;
import org.bson.Document;

import javax.enterprise.context.ApplicationScoped;
import javax.transaction.Transactional;
import java.util.List;
import java.util.stream.Collectors;

import static festival.srv.constant.DbCollections.VOLUNTEERS_COLLECTION;
import static festival.srv.constant.DbKeys.*;

@ApplicationScoped
public class VolunteerService extends Service<Volunteer> {


	/**
	 * Create a volunteer in the collection. The id is automatically generated by the database.
	 *
	 * @param volunteer The volunteer to create.
	 */
	@Transactional
	public void create(Volunteer volunteer){
		Document document = new Document()
				.append(FIRST_NAME, volunteer.getFirstName())
				.append(LAST_NAME, volunteer.getLastName())
				.append(EMAIL, volunteer.getEmail());

		super.create(document);
	}

	/**
	 * Get all volunteers from the collection.
	 *
	 * @return The list of volunteers.
	 */
	public List<Volunteer> read(){
		return getDocumentList().stream().map(Volunteer::new).collect(Collectors.toList());
	}


	/**
	 * Get all volunteers with the same lastname.
	 *
	 * @param lastname The lastname of the volunteer.
	 * @return The list of volunteers.
	 */
	public List<Volunteer> readByLastName(String lastname) {
		return getDocumentList().stream()
				.filter(document -> document.getString(LAST_NAME).toLowerCase().matches("(.*)" + lastname.toLowerCase() + "(.*)"))
				.map(Volunteer::new)
				.collect(Collectors.toList());
	}

	/**
	 * Get all volunteers with the same lastname.
	 *
	 * @param firstname The lastname of the volunteer.
	 * @return The list of volunteers.
	 */
	public List<Volunteer> readByFirstName(String firstname) {
		return getDocumentList().stream()
				.filter(document -> document.getString(FIRST_NAME).toLowerCase().matches("(.*)" + firstname.toLowerCase() + "(.*)"))
				.map(Volunteer::new)
				.collect(Collectors.toList());
	}

	/**
	 * Get all volunteers with the same lastname/firstname.
	 *
	 * @param name The firstname/lastname of the volunteer.
	 * @return The list of volunteers.
	 */

	public List<Volunteer> readByFirstNameOrLastName(String name) {
		return getDocumentList().stream()
				.filter(document -> document.getString(FIRST_NAME).toLowerCase().contains(name.toLowerCase()) ||
						document.getString(LAST_NAME).toLowerCase().contains(name.toLowerCase()))
				.map(Volunteer::new)
				.collect(Collectors.toList());
	}

	/**
	 * Read all volunteers by slot for a given zone. If there is no volunteer, an empty list is returned.
	 *
	 * @return list of volunteers.
	 */
	public List<SlotVolunteerDto> readBySlotForOneZoneId(String zoneId) {
		Zone zone = zoneService.read(zoneId);

		return zone.getSlots().stream()
				.map(slot -> {
					List<Volunteer> volunteerList = slot.getVolunteerRefs().stream()
							.map(this::read)
							.collect(Collectors.toList());
					return new SlotVolunteerDto(zoneId, slot, volunteerList);
				})
				.collect(Collectors.toList());
	}

	/**
	 * Get a volunteer from the collection.
	 *
	 * @param id The id of the volunteer.
	 * @return The volunteer.
	 */
	public Volunteer read(String id){
		return new Volunteer(getDocument(id));
	}

	@Override
	protected String getCollectionName() {
		return VOLUNTEERS_COLLECTION;
	}
}
