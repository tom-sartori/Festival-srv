package festival.srv.service;

import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.mongodb.MongoWriteException;
import com.mongodb.client.result.UpdateResult;
import festival.srv.entity.Game;
import festival.srv.entity.Slot;
import festival.srv.entity.Volunteer;
import festival.srv.entity.Zone;
import org.bson.Document;
import org.bson.types.ObjectId;

import javax.enterprise.context.ApplicationScoped;
import javax.transaction.Transactional;
import javax.ws.rs.BadRequestException;
import javax.ws.rs.NotFoundException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import static festival.srv.constant.DbCollections.ZONES_COLLECTION;
import static festival.srv.constant.DbKeys.*;

@ApplicationScoped
public class ZoneService extends Service<Zone> {


	/**
	 * Create a zone in the collection. The id is automatically generated by the database.
	 *
	 * @param zone The zone to create.
	 */
	@Transactional
	public void create(Zone zone){
		Document document = new Document()
				.append(NAME, zone.getName())
				.append(GAME_REFS, zone.getGameRefs())
				.append(SLOTS, zone.getSlots());

		super.create(document);
	}

	/**
	 * Get all zones from the collection.
	 *
	 * @return The list of zones.
	 */
	public List<Zone> read(){
		return getDocumentList().stream().map(Zone::new).collect(Collectors.toList());
	}

	/**
	 * Get a zone from the collection.
	 *
	 * @param id The id of the zone.
	 * @return The zone.
	 */
	public Zone read(String id){
		return new Zone(getDocument(id));
	}

	/**
	 * Get all zones with the same name.
	 *
	 * @param name The name of the zone.
	 * @return The list of zones.
	 */
	public List<Zone> readByName(String name) {
		return getDocumentList().stream()
				.filter(document -> document.getString(NAME).toLowerCase().matches("(.*)(^| )" + name.toLowerCase() + "(.*)"))
				.map(Zone::new)
				.collect(Collectors.toList());
	}

	/**
	 * Add a game to a zone in the collection. The id is not updated.
	 *
	 * @param idZone The id of the document.
	 * @param idGame The id of the game.
	 */
	@Transactional
	public void addGameById(String idZone, String idGame){
		if (idZone.equals(":idZone")) {
			throw new BadRequestException("The id is null. ");
		}
		try {
			Zone zone = read(idZone);
			Game game = gameService.read(idGame);
			if (game != null){
				if (!zone.getGameRefs().contains(idGame)){
					zone.getGameRefs().add(idGame);
					zone.setId(null);

					UpdateResult updateResult = getCollection().updateOne(new Document(ID, new ObjectId(idZone)), new Document("$set", zone));
					if (updateResult.getMatchedCount() == 0) {
						throw new NotFoundException();
					}
				}
			}
		}
		catch (MongoWriteException e) {
			if (e.getCode() == 6) {
				throw new BadRequestException("Modifiers operate on fields but we found type null instead. ");
			}
			throw e;
		}
	}

	/**
	 * Add a volunteer to a zone in the collection for a slot. If the slot does not exist, the slot is created. The id is not updated.
	 *
	 * @param idZone The id of the document.
	 * @param idVolunteer The id of the volunteer.
	 * @param jsonBody contains the start date and end date of the slot
	 */
	@Transactional
	public void addVolunteerSlot(String idZone, String idVolunteer, String jsonBody){
		if (idZone.equals(":idZone")) {
			throw new BadRequestException("The id is null. ");
		}
		try {
			Zone zone = read(idZone);
			Gson gson = new Gson();
			JsonObject jsonObject = gson.fromJson(jsonBody, JsonObject.class);

			String startDateString = jsonObject.get(START_DATE).getAsString();
			String endDateString = jsonObject.get(END_DATE).getAsString();
			SimpleDateFormat formatter = new SimpleDateFormat("MMM dd, yyyy, HH:mm:ss a", Locale.ENGLISH);

			Date startDate = formatter.parse(startDateString);
			Date endDate = formatter.parse(endDateString);

			Volunteer volunteer = volunteerService.read(idVolunteer);
			if (volunteer != null){
				boolean foundSlot = false;
				for (Slot slot : zone.getSlots()) {
					if (slot.getStartDate().compareTo(startDate) == 0 && slot.getEndDate().compareTo(endDate) == 0) {
						foundSlot = true;
						if (!slot.getVolunteerRefs().contains(idVolunteer)){
							slot.getVolunteerRefs().add(idVolunteer);
							break;
						}
					}
				}
				// If the slot does not exist, we create it.
				if (!foundSlot) {
					List<String> listVolunteer = new ArrayList<>();
					Slot newSlot = new Slot(startDate, endDate, listVolunteer);
					newSlot.getVolunteerRefs().add(idVolunteer);
					zone.getSlots().add(newSlot);
				}
			}
			zone.setId(null);
			UpdateResult updateResult = getCollection().updateOne(new Document(ID, new ObjectId(idZone)), new Document("$set", zone));
			if (updateResult.getMatchedCount() == 0) {
				throw new NotFoundException();
			}
		}
		catch (MongoWriteException e) {
			if (e.getCode() == 6) {
				throw new BadRequestException("Modifiers operate on fields but we found type null instead. ");
			}
			throw e;
		} catch (ParseException e) {
			e.printStackTrace();
		}
	}

	@Override
	protected String getCollectionName() {
		return ZONES_COLLECTION;
	}
}
